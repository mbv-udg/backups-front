{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate() {\n    return this.checkAuth();\n  }\n  checkAuth() {\n    if (this.authService.isUserLoggedIn()) {\n      return true;\n    } else {\n      // Redirect to the login page if the user is not authenticated\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n  static #_ = this.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthGuard","constructor","authService","router","canActivate","checkAuth","isUserLoggedIn","navigate","_","i0","ɵɵinject","i1","AuthService","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["/home/xarxes/server/backups-front/src/app/auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from './services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  constructor(\n    private authService: AuthService, \n    private router: Router\n  ) {}\n\n  canActivate(): boolean {\n    return this.checkAuth();\n  }\n\n  private checkAuth(): boolean {\n    if (this.authService.isUserLoggedIn()) {\n      return true;\n    } else {\n      // Redirect to the login page if the user is not authenticated\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n\n}"],"mappings":";;;AAOA,OAAM,MAAOA,SAAS;EACpBC,YACUC,WAAwB,EACxBC,MAAc;IADd,KAAAD,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;EACb;EAEHC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACC,SAAS,EAAE;EACzB;EAEQA,SAASA,CAAA;IACf,IAAI,IAAI,CAACH,WAAW,CAACI,cAAc,EAAE,EAAE;MACrC,OAAO,IAAI;KACZ,MAAM;MACL;MACA,IAAI,CAACH,MAAM,CAACI,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;EAEhB;EAAC,QAAAC,CAAA,G;qBAlBUR,SAAS,EAAAS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAATf,SAAS;IAAAgB,OAAA,EAAThB,SAAS,CAAAiB,IAAA;IAAAC,UAAA,EAFR;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}